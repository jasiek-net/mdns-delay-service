ŹRÓDŁA:
- treść zadania
- moodle
- dokumentacj RFC
- readme z labów
- mail mitchos

----------------------------
PTR i A
Nie implementujemy obsługi rekordów SRV, bo jest zbyt skomplikowa i utrudniałaby rozwiąznie. Zakładamy, że rekordy, które dostajemy w odpowiedzi na pytanie PTR, mają wpisy A, i są to adresy, pod którymi dostępne są komputery udostępniające odpowiednie usługi.

Na przykład:
na zapytanie o PTR dla _opoznienia._udp.local. odpowiadamy, że moj-komputer._opoznienia._udp.local.,
otrzymawszy taką odpowiedź pytamy o A dla moj-komputer._opoznienia._udp.local.,
na zapytanie o A dla moj-komputer._opoznienia._udp.local. odpowiadamy, że 192.168.1.42.

Zakładamy, że wszystkie uruchomione w sieci instancje naszego programu mają tę samą liczbę podaną w parametrze -u? 

10. Co oznacza słowo pojedyncze w "Multicast DNS w takim zakresie, żeby móc skutecznie odpowiadać na pojedyncze pytania o wpisy typu PTR"?
Program powinien co najmniej umieć odpowiadać na pakiety zawierające pojedyncze pytanie o PTR/A. Należy też spodziewać się, że otrzymane pakiety mogą zawierać więcej niż jedną odpowiedż. Nie wymagamy skutecznego odpowiadania na pakiety z wieloma zapytaniami, ale zrobienie tego ułatwia testowanie, bo standardowe implementacje mDNS+DNS-SD zazwyczaj wysyłają wiele pytań na raz.

----------------------------
mDNS
----------------------------
The mDNS Ethernet frame is a multicast UDP packet to:
    MAC address 01:00:5E:00:00:FB (for IPv4) or 33:33:00:00:00:FB (for IPv6)
    IPv4 address 224.0.0.251 or IPv6 address FF02::FB
    UDP port 5353
The Flags word will generally be 00 00 for a query and 84 00 for a response.
a 2-byte type field (hex 00 00 for an A record),


Multicast DNS (mDNS) is a protocol that uses APIs similar to unicast Domain Name System but implemented over a multicast protocol. Each computer on the LAN stores its own list of DNS resource records (e.g., A, MX, SRV) and joins the mDNS multicast group. When an mDNS client wants to know the IP address of a computer given its name, mDNS client sends a request to a well-known multicast address; the computer with the corresponding A record replies with its IP address. The mDNS multicast address is 224.0.0.251 for IPv4 and ff02::fb for IPv6 link-local addressing.

* Jeśli klient mDNS chce poznać IP komputera, którego zna nazwę wysyła requesta na multicastowy adres a komputer z odpowiednia nazwą odpowiada A recorderm ze swoim adresm IP.
--------------------------
mDNS - documentation

Any DNS query for a name ending with ".local." MUST be sent to the
mDNS IPv4 link-local multicast address 224.0.0.251 (or its IPv6
equivalent FF02::FB).

To
avoid accidental synchronization when, for some reason, multiple
clients begin querying at exactly the same moment (e.g., because of
some common external trigger event), a Multicast DNS querier SHOULD
also delay the first query of the series by a randomly chosen amount
in the range 20-120 ms.

The querier should plan to issue a query at 80% of the record
lifetime, and then if no answer is received, at 85%, 90%, and 95%.
If an answer is received, then the remaining TTL is reset to the
value given in the answer, and this process repeats for as long as
the Multicast DNS querier has an ongoing interest in the record.  If
no answer is received after four queries, the record is deleted when
it reaches 100% of its lifetime.  A Multicast DNS querier MUST NOT
perform this cache maintenance for records for which it has no local
clients with an active interest.  If the expiry of a particular
record from the cache would result in no net effect to any client
software running on the querier device, and no visible effect to the
human user, then there is no reason for the Multicast DNS querier to
waste network capacity checking whether the record remains valid.

RESPOND:
The determination of whether a given record answers a given question
is made using the standard DNS rules: the record name must match the
question name, the record rrtype must match the question qtype unless
the qtype is "ANY" (255) or the rrtype is "CNAME" (5), and the record
rrclass must match the question qclass unless the qclass is "ANY"
(255).  As with Unicast DNS, generally only DNS class 1 ("Internet")
is used, but should client software use classes other than 1, the
matching rules described above MUST be used.


----------------------------
DNS-SD
----------------------------
A client discovers the list of available instances of a given service type using a query for a DNS PTR [RFC1035] record with a name of the form "Service>.<Domain>", which returns a set of zero or more names, which are the names of the aforementioned DNS SRV/TXT record pairs.

* Klient wysyła pytanie o dostawców usługi do serwera DNS-SD i otrzymuje listę lokalnych komputerów, które udostępniają taką usługę

DNS-based service discovery (DNS-SD) is the other half of Apple's solution, built on top of the Domain Name System; see RFC 6763.[15] It is used in Apple products, many network printers and a number of third party products and applications on various operating systems. The Apple solution uses DNS messages, in contrast to Microsoft's competing technology, SSDP, which uses HTTP messages. It uses DNS SRV, TXT, and PTR records to advertise Service Instance Names. The hosts offering services publish details of available services: instance, service type, domain name and optional configuration parameters. Service types are given informally on a first-come basis. A service type registry exists,[16] maintained and published by DNS-SD.org.[17]

Many Apple Mac OS X networking clients, such as the Safari browser and the iChat instant messaging software, use DNS-SD to locate nearby servers. On MS Windows, some instant messaging and VoIP clients support DNS-SD. Some Unix, BSD, and Linux distributions also include DNS-SD functionality.

----------------------------
TELNET: http://stackoverflow.com/questions/18333777/what-is-correct-way-of-getting-keypress-in-telnet-session-in-c-programming-langu




----------------------------
STRATEGY
----------------------------
1. Przebić się przez dokumentację mDNS i DNS-SD
2. Przebić się przez Boost:Asio
3. Nakurwiać kodziwo



----------------------------
FAQ:
----------------------------
Multicast a Unicast? mDNS a DNS?
Unicast -> do konkretnego odbiorcy po IP (dla n odbiorców n komunikatów)
Multicast -> do wielu różnych odbiorców po ogólnym IP (dla n odbiorców jeden komunikat)

Jak funkcjonalnością różni się mDNS od DNS-SD?
mDNS:
  - zmienia nazwy komputerów z sieci lokalnej na IP (np. MyComputer na 10.0.0.3)
  - nie ma jednego serwera, rozsyła po multicascie, jeśli ktoś rozpoznał swoją nazwę to odpisuje
  - 
DNS-SD:
  - pyta w sieci lokalnej, kto udostępnia jakie usługi (drukarkę albo _opoznienia._udp)

Czy mDNS komunikują się zawsze i tylko po IP 204... i porcie 5353?

Czym się różni klient/serwer przy mDNS/DNS-SD
There are two kinds of Multicast DNS queries: one-shot queries of the
kind made by legacy DNS resolvers, and continuous, ongoing Multicast
DNS queries made by fully compliant Multicast DNS queriers, which
support asynchronous operations including DNS-Based Service Discovery




----------------------------
MITCHOS
----------------------------

Przede wszystkim zastanów się czy chcesz pisać w C++ czy C. Najnowsza odpowiedź na moodlu pokazuje, że jednak nie potrzebujemy panicznie map z C++.

C++ dużo ułatwia - nie trzeba synchronizować wątków, ustawia się tylko funkcje, które mają się wykonać przy zajściu określonych zdarzeń (np. pomiar czasu jak przyjdzie pakiet UDP). Wada: trzeba przeczytać tutorial do Boost::Asio i korzystać z niego (czyli z nieznanego narzędzia).
W przypadku tej opcji musisz przeczytać: http://www.boost.org/doc/libs/1_58_0/doc/html/boost_asio.html

Zaletą C jest przede wszystkim to, że był omówiony i można kopiować dużo z labów. Wada: nie ma struktur danych z STL (mapa itp.), ale jak już wspomniałem okazuje się  że nie trzeba korzystać z mapy, więc to nie jest kluczowa sprawa.
W przypadku tej opcji ważne są scenariusze z labów. Chyba do pomiaru czasu po TCP będzie trzeba wykorzystać funkcje select/poll albo bibliotekę libevent. Resztę można chyba zrobić na zwykłych gniazdach (nie wiem jeszcze co z telnetem)


Standard RFC musisz w końcu przeczytać, ale najpierw przeczytaj na Wikipedii:
1) co to jest ogólnie mDNS i DNS-SD
2) jak wygląda pakiet w protokole DNS, bo pakiety mDNS są prawie takie same, a na Wikipedii to jest ładnie opisane


mDNS:
- klient: multicas 204... 5353 PTR _opoznienie._udp.local.
- wysyłanie pomiaru co 10 sekund ma być absolutnie niezależne od odbieranych pakietów
- odpowiedź A: NAZWA._USŁUGA._PROTOCOL
- i pytanie 

- poprawić te u_chary itd: http://stackoverflow.com/questions/21240120/how-to-tell-swig-to-treat-u-char-as-unsigned-char

- PRZESYŁANIE PAKIETÓW:
  - gdy answer to nie wrzucamy pola question
  - answer w takim samym formacie co question (bez offsetu)
  - czy Autohrity answer?
  - po co nam pole rdata? czy trzeba z niego korzystać? czy trzeba coś tam wpisać, czy trzeba z tego czytać i czy można z tego korzystać (np. wziąć od razu IP jeśli chodzi o udostępnianie usługi itd.)
  - w polu rdata trzeba wpisać odpowiedź, a pytanie skopiować do pola name!!!

  - co daje w nagłówki pid procesu? Czy to SO sprawia, że trafia do nas ten pakiet, czy to my mamy zweryfikować czy to na nasze pytanie przyszła odp?

  - na jakim interfejsie mamy wysyłać adres ip?


-------------------------------
TCP
-------------------------------
http://www.scottklement.com/rpg/socktut/nonblocking.html
The connect() API is a little different. If you try to call connect() in non-blocking mode, and the API can't connect instantly, it will return the error code for 'Operation In Progress'. When you call connect() again, later, it may tell you 'Operation Already In Progress' to let you know that it's still trying to connect, or it may give you a successful return code, telling you that the connect has been made.

http://stackoverflow.com/questions/4181784/how-to-set-socket-timeout-in-c-when-making-multiple-connections

http://stackoverflow.com/questions/489036/how-does-the-socket-api-accept-function-work


pomysły na rozwiązania:
POLL:
1. Wywołać nieblokującego connecta na wszystkich adresach
2. Nasłuchiwać w poll na odpowiedni
  - pytanie czy poll zareaguje na odpowiedni handshake?

DWA WĄTKI:
1. Wysyła nieblokujące connecty do listy addr
2. Libevent w pętli odbiera pakiety
  - problem: czy można wywołać connect na sockecie na którym wcześniej był listen?
  - zakładam, że nie, więc pomysł upada/chyba że zrobimy clienta lib



-------------------------------
UDP
-------------------------------
Klienci z dowolnego portu wysyłają komunikat na port 3382 (lub jakiś taki gdzie jest serwer) i otrzymują na swój numer portu odpowiedź od serwera. Serwer robi dokładnie to co w zadaniu 1: odbiera i odsyła w ogóle nie myśląc komu i co. Wiadomość trafia do właściwego klienta bo jest odsyłana na adres z którego przyszła wiadomość
Problem z klientami: trzeba na raz wysłać wiele komunikatów i nie można czekać na odpowiedź serwera - rozwiązanie z libevent - dla każdego serwera do którego będziemy sprawdzali czas tworzymy wydarzenie i co sekundę rozsyłamy komunikat i jak przyjadę info zwrotne to wtedy odpala nam się event odpowiedzialny za zaktualizowanie wyników.

problem na przyszłość: jak dodawać z mDNSa nowych klientów serwera i jak ich usuwać?

struct client_udp {
	
	


}

klient:
wysyła do wszystkich serwerów z tablicy w pętli pakiety z timestampem a potem odbiera po kolei

SEND:
- sendto: SO tworzy nowe gniazdo i na nim wysyła pakiet
- klient nie musi związywać z gniazdem numeru portu. Przed wysłaniem pierwszego komunikatu port zostanie przydzielony przez system operacyjny.
- pytanie:
  - na jak długo powstaje to gniazdo? tylko jedno send-recieve czy jak?
  - czyli wystarczy nam jedno gniazdo? no powinno wystarczyć - zrobimy w libevent po prostu jedno wydarzenie pod tytułem "odpowiedź od serwera udp" i cokolwiek będzie przychodzić, będziemy to odbierać i wpisywać do tablicy, chyba spoko?
  - problem: iluwątkowo działa libevent? jak wygląda ta obsługa eventów? czy mam się tym w ogóle martwić?
  - klient: co sekundę rozsyła pakiety UDP do wszystkich serwerów
  - czy może pakiety UDP powinny być wysyłane po multi-recive?

RECIEVE
  - problem recvfrom jest blokujący! jeśli nie uzyska odpowiedzi od wszystkich to się zatrzyma

+ event: przychodzi pakiet (pytanie - skąd wiadomo, że do nas) + pytanie czy co sekundę mamy zakładać nowe gniazdo? jeśli będziemy mieli zawsze to samo gniazdo, to różne dziwne pakiety (stare itd) mogą spływać, jak co sekundę będzie nowe to w ogóle jak event ma się zorientować, że to do niego? czy mamy za każdym razem zmieniać eventa na takiego, który wie co ma nasłuchiwać?
  - czy tworzymy stałe gniazdo (przy pomocy connect np.) czy SO sam nam stworzy i mamy na nim nasłuchiwać po prostu? przy pomocy libeventa
  - 


WSPÓLNIE:
- czy nabijanie co sekundę ma być takie same dla wszystkich czy każdy sam jak może to sobie tę sekundę nabija?
- czy implementacja listowa tych wszystkich klientów jest efektywna? raczej niet...
- ma być error gdy jest != 0, < 0, == -1 czy kurwa kiedy?


ORGANIZACJA KODU:
- plik main.c który ma funkcję main() odpalającą wątki z usługami
- gdzie trzymać funkcje obługujące wątki? w plikach .h:
  - tylko czy to się będzie dobrze kompilowało (nie będzie pomijało błędów)
  - czy tak się w praktyce robi?

zobaczyć jak to wygląda dla err.o
  - err.h gdzie są deklaracje funkcji
  - err.c gdzie jest implementacja funkcji

plik header - ma tylko deklaracja pojawiających się funkcji i zmiennych:
Also, as mentioned before, if the implementation file needs some other headers, so be it, and it is entirely normal for some extra headers to be necessary. But the implementation file ('magicsort.c') should include them itself, and not rely on its header to include them. The header should only include what users of the software need; not what the implementers need.



TODO:
- wszędzie pozmieniać sockaddr z sockaddr_in - w ogóle po chuj się to tak deklaruje skoro wszędzie się używa sockaddr!?
- przenieść logikę rw_locka do linkedlisty! i pozbyć się tego kodu wątków!